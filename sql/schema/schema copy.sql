
-- Tabela spółek giełdowych
CREATE TABLE Company (
    company_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(100) NOT NULL,
    ticker         VARCHAR2(10) NOT NULL UNIQUE,
    sector         VARCHAR2(50),
    country        VARCHAR2(50),
    website        VARCHAR2(100)
);

-- Tabela z notowaniami giełdowymi
CREATE TABLE StockPrice (
    price_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_id     NUMBER NOT NULL,
    trade_date     DATE NOT NULL,
    open_price     NUMBER(10, 2),
    high_price     NUMBER(10, 2),
    low_price      NUMBER(10, 2),
    close_price    NUMBER(10, 2),
    volume         NUMBER,
    currency       VARCHAR2(10) DEFAULT 'USD',
    close_price_pln NUMBER(10, 2),
    source         VARCHAR2(50),
    CONSTRAINT fk_stock_company FOREIGN KEY (company_id)
        REFERENCES Company(company_id)
        ON DELETE CASCADE
);

CREATE UNIQUE INDEX ux_stock_company_date ON StockPrice(company_id, trade_date);


-- Archiwum cen (backup danych)
CREATE TABLE StockPriceArchive (
    archive_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_id     NUMBER,
    trade_date     DATE,
    open_price     NUMBER(10, 2),
    high_price     NUMBER(10, 2),
    low_price      NUMBER(10, 2),
    close_price    NUMBER(10, 2),
    volume         NUMBER,
    currency       VARCHAR2(10),
    close_price_pln NUMBER(10, 2),
    archived_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_by     VARCHAR2(50),
    note           VARCHAR2(200)
);

-- Log operacji (importów, błędów, wyjątków...)
CREATE TABLE ImportLog (
    log_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    log_time       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    operation      VARCHAR2(20), -- 'IMPORT', 'ARCHIVE', 'DELETE', itd
    user_name      VARCHAR2(50),
    table_name     VARCHAR2(50),
    message        CLOB
);

-- Tabela użytkowników (symulacja inwestorów)
CREATE TABLE Investor (
    investor_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(100),
    email          VARCHAR2(100)
);

-- Portfel inwestora (posiadane akcje)
CREATE TABLE Portfolio (
    portfolio_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    investor_id    NUMBER NOT NULL,
    company_id     NUMBER NOT NULL,
    shares         NUMBER NOT NULL,
    avg_price      NUMBER(10, 2),
    last_updated   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_portfolio_investor FOREIGN KEY (investor_id) REFERENCES Investor(investor_id),
    CONSTRAINT fk_portfolio_company FOREIGN KEY (company_id) REFERENCES Company(company_id)
);

ALTER TABLE Portfolio
ADD CONSTRAINT uq_portfolio_unique UNIQUE (investor_id, company_id);

-- Historia transakcji użytkownika (symulacja kupna/sprzedaży)
CREATE TABLE Transaction (
    transaction_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    investor_id    NUMBER NOT NULL,
    company_id     NUMBER NOT NULL,
    operation      VARCHAR2(10), -- 'BUY' / 'SELL'
    shares         NUMBER NOT NULL,
    price_per_share NUMBER(10,2),
    total_value    NUMBER(12,2),
    transaction_date DATE DEFAULT SYSDATE,
    CONSTRAINT fk_tx_investor FOREIGN KEY (investor_id) REFERENCES Investor(investor_id),
    CONSTRAINT fk_tx_company FOREIGN KEY (company_id) REFERENCES Company(company_id)
);

-- Tabela z kursami walut
CREATE TABLE ExchangeRate (
    rate_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    currency      VARCHAR2(10) NOT NULL, -- 'USD', 'EUR', itsd
    rate_to_pln   NUMBER(10, 4) NOT NULL,
    rate_date     DATE NOT NULL
);

-- Migawki portfela inwestora do analizy zmian
CREATE TABLE PortfolioSnapshot (
    snapshot_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    investor_id    NUMBER NOT NULL,
    snapshot_date  DATE DEFAULT SYSDATE,
    total_value_pln NUMBER(12, 2),
    CONSTRAINT fk_snap_investor FOREIGN KEY (investor_id) REFERENCES Investor(investor_id)
);
